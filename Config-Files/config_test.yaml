 # 
 # This list of algorithms should be generated by a script which checks the filesystem for installs.
 # It shouldn't be changed by mere mortals. (alternatively, we could add a path to executable for each algorithm
 # in the list to reduce the number of assumptions of the program at the cost of making the config a little more involved)
 # Each algorithm has an 'include' parameter. By toggling 'include' to true/false the user can change
 # which algorithms are run in a given experiment.
 #
 # algorithm-specific parameters are embedded in lists so that users can specify multiple. If multiple
 # parameters are specified then the algorithm will be run as many times as needed to cover all parameter
 # combinations. For instance if we have the following:
 # - name: "myAlg"
 #   params:
 #         include: true
 #         a: [1,2]
 #         b: [0.5,0.75]
 #
 # then myAlg will be run on (a=1,b=0.5),(a=1,b=0.75),(a=2,b=0.5), and (a=2,b=0,75). Pretty neat, but be
 # careful: too many parameters might make your runs take a long time.
 
 algorithms:
        - name: "bowtiebuilder"
          params:
                include: false
                run1:

        - name: "pathlinker"
          params:
                include: true
                run1:
                    k: [500]

        - name: "responsenet"
          params:
                include: false
                run1:
                    y: [20]

        - name: "pcsf"
          params:
                include: false
                run1:
                    r: [5]
                    b: [1,2]
                    w: np.linspace(0,5,20)
                    g: [3]
                run2:
                    r: [5]
                    b: [1,2]
                    w: np.linspace(0,5,20)
                    g: [3]

        - name: "shortestpaths"
          params:
                include: false
                run1:


        - name: "rwr"
          params:
                include: false
                run1:
                    a: [0.85]
                    t: [0.3]

 # Here we fix which pathways to run and other file location information. 
 data:
        datasets: ["data1"]
        data_dir: "input"
        out_dir:  "output"

 # If we want to reconsruct then we should set run to true.
 reconstruction_settings:

         #set where everything is saved
         - locations:
                #place the path to your interactome here
                interactome_path: "/path/to/interactome"

                #place the path to your pathway annotation files here
                pathway_dir: "/path/to/pathways"

                #place the save path here
                reconstruction_dir: "/path/to/save"

         - run: true

 #Do we want to augment our reconstructions
 augmentation_settings:
        
         #save locations
         - locations:
                 reconstruction_dir: "/path/to/save"

         - PRAUG:

                 run: true

         - ensemble:

                 run: false
                 rule: "Intersection"


 evaluation_settings:

         - locations:
                 reconstruction_dir: "/path/to/reconstructions"

         - PR:
                 compute: true
                
                 #the open-world assumption is the denial that being unannotated is to be not in the pathway. 
                 #it allows for sub-sampling of negatives.

                 open_word: true

                 #in the case that we use the open-world assumption, we need to tell the program how to negatives.
                 #The options here are "fixed" or "random". In the case that "fixed" is selected the program will use
                 #negative values picked by the authors of this software. If "random" is chosen, the program will sample
                 #from unannoted interactions/proteins at a rate of 50 negatives to every positive.
        
                 negative_set: "fixed"



 #Plotting
 plot_settings:

         - locations:
                 reconstruction_dir: "/path/to/reconstructions"
                 
                 plot_dir: "/path/to/plots"
         - plots:

                - name: "example_plot_1"
                  type: "PR"
                  #where panel determines whether many subfigures are used or just 1.
                  #      fmax determines whether to display fmax in the legend
                  #      edge determines whether to plot edge PR or node PR
                  params: ["panel=True","fmax=True","edge=True"]